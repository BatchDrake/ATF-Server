{
  "openapi": "3.0.3",
  "info": {
    "title": "atf-server",
    "version": "0.2",
    "license": {
      "name": "AGPLv3",
      "url": "https://www.gnu.org/licenses/agpl-3.0.html"
    },
    "contact": {
      "name": "Gonzalo J. Carracedo",
      "url": "https://actinid.org/"
    },
    "description": "This API describes the communication protocol between client and server for a party contest."
  },
  "servers": [
    {
      "url": "http://actinid.org:3000",
      "description": "Actinid (Develop)"
    }
  ],
  "paths": {
    "/account": {
      "patch": {
        "summary": "Update account information",
        "operationId": "patchAccount",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivate"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSelfUpdate"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/ifMatchHeader"
          }
        ],
        "description": "Enables users to update their own user account information. This endpoint supports partial updates by sending only the keys and values that need to be updated.",
        "tags": [
          "account"
        ]
      },
      "get": {
        "summary": "Get account information",
        "operationId": "getAccount",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivate"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Enables users to receive information about their own user accounts.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          }
        ],
        "tags": [
          "account"
        ]
      }
    },
    "/account/avatar": {
      "post": {
        "summary": "",
        "operationId": "postAccountAvatar",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivate"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "description": "Allows an user to update their own avatar image.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifMatchHeader"
          }
        ],
        "tags": [
          "account"
        ]
      }
    },
    "/account/logout": {
      "parameters": [],
      "post": {
        "summary": "",
        "operationId": "accountLogout",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Ends the current user session.",
        "tags": [
          "account"
        ],
        "security": [
          {
            "personalKey": []
          }
        ]
      }
    },
    "/account/password": {
      "parameters": [],
      "put": {
        "summary": "",
        "operationId": "accountChangePassword",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChange"
              }
            }
          }
        },
        "tags": [
          "account"
        ],
        "description": "Allows changing the password of the current logged in user.",
        "security": [
          {
            "personalKey": []
          }
        ]
      }
    },
    "/account/reset": {
      "post": {
        "summary": "",
        "operationId": "requestAccountReset",
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetRequest"
              }
            }
          }
        },
        "description": "This endpoint allows requesting the resetting of an account's password given the user has access to the email account used to register this account.\n\nThe process involves sending an email address to this endpoint, which, if existing, will trigger the system sending an email with a one time token to reset the account to that address.\n\nFor security reasons this endpoint will answer 202 Accepted in any case, whether the email is in the system or not, to prevent enumeration attacks. If the object receive does not contain a valid email address or does not contain one at all, the answer will be 400 Bad Request.",
        "tags": [
          "account"
        ]
      }
    },
    "/account/reset/{token}": {
      "put": {
        "summary": "",
        "operationId": "accountReset",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "account"
        ],
        "description": "This endpoint allows finishing the password reset process. The token received by email is sent on the path. A new password for the user is passed in the body of the request.\n\nA 200 OK status code will indicate the lifetime of the used token is expired and the password has been set to the new value.\n\nA 400 Bad Request will be produced if the body is invalid, be it that the password is not accepted as valid or that the body doesn't conform to the specification.\n\nA 404 Not Found response will indicate that the introduced token is not a valid token generated by the system.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordReset"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "token",
          "in": "path",
          "required": true,
          "description": "Password reset token received by the user via email."
        }
      ]
    },
    "/ranking": {
      "get": {
        "summary": "Query ranking",
        "tags": [
          "ranking"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RankingCollectionResponse"
                },
                "examples": {}
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "listRanking",
        "description": "Gives access to the current contest ranking.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          }
        ]
      }
    },
    "/user": {
      "get": {
        "summary": "Query user list",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCollectionResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "listUsers",
        "description": "List existing users' information, both public and private. This is an administrative endpoint.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ]
      },
      "post": {
        "summary": "Create user",
        "operationId": "post-user",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Create a new user in the system. This is an administrative endpoint.",
        "tags": [
          "user"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreation"
              }
            }
          }
        },
        "security": [
          {
            "personalKey": []
          }
        ]
      }
    },
    "/user/{id}": {
      "get": {
        "summary": "Fetch user data",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivate"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "getUserId",
        "description": "Get all user's data, public and private for an user given their ID. This is an administrative endpoint.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/idParameter"
        }
      ],
      "patch": {
        "summary": "Update user's account information",
        "operationId": "patchUserId",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivate"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAdminUpdate"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/ifMatchHeader"
          }
        ],
        "description": "Update user's information. This is an administrative endpoint. This endpoint supports partial updates by sending only the keys and values that need to be updated.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/{id}/avatar": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Update user's avatar",
        "operationId": "postUserIdAvatar",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivate"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/ifMatchHeader"
          }
        ],
        "description": "Update user's avatar picture. This is an administrative endpoint. ",
        "tags": [
          "user"
        ]
      }
    },
    "/user/{id}/confirmation": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer",
            "minLength": 1,
            "format": "int64",
            "minimum": 0,
            "example": 1752567
          },
          "description": "Identifier for an entity in the system, passed as a path parameter."
        }
      ],
      "get": {
        "summary": "List user confirmations",
        "tags": [
          "confirmation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmationCollectionResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "listUserConfirmation",
        "description": "Gives a historic record of the user's attendance confirmations to parties, and subsequent scoring, sorted in descending chronological order.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          }
        ]
      }
    },
    "/announcement": {
      "get": {
        "summary": "Query announcement list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnouncementCollectionResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "listAnnouncements",
        "description": "Lists all announcements currently visible. That is, announcements active at the present time for anonymous and normal users and all existing announcements for admin users.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "tags": [
          "announcement"
        ]
      },
      "post": {
        "summary": "Create announcement",
        "operationId": "postAnnouncement",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Announcement"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Creates a new announcement. This endpoint is only available to authenticated users.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnouncementCreation"
              }
            }
          }
        },
        "tags": [
          "announcement"
        ],
        "security": [
          {
            "personalKey": []
          }
        ]
      }
    },
    "/announcement/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get announcement details",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Announcement"
                }
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "getAnnouncementId",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          }
        ],
        "tags": [
          "announcement"
        ],
        "description": "Gets data about an announcement given its ID."
      },
      "delete": {
        "summary": "",
        "operationId": "deleteAnnouncementId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/ifMatchHeader"
          }
        ],
        "tags": [
          "announcement"
        ],
        "description": "Removes an announcement.",
        "security": [
          {
            "personalKey": []
          }
        ]
      }
    },
    "/party": {
      "get": {
        "summary": "List parties",
        "tags": [
          "party"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartyCollectionResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "listParties",
        "description": "Lists existing parties.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ]
      },
      "post": {
        "summary": "",
        "operationId": "postParty",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Party"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartyCreation"
              }
            }
          }
        },
        "description": "This endpoint is used to create a party resource. Note it is assymetrical, since parties, once created, include much denormalized information, useful on presenting them on screen.\n\nThis endpoint will receive a PartyCreation object and return a full Party object.",
        "tags": [
          "party"
        ],
        "security": [
          {
            "personalKey": []
          }
        ]
      }
    },
    "/party/{party}/confirmation": {
      "post": {
        "summary": "Confirm assistance",
        "operationId": "postPartyConfirmation",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Confirmation"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmationCreation"
              },
              "examples": {}
            }
          },
          "description": "The confirmation creation, including an ID and the confirmation image as payload in multipart/form-data."
        },
        "description": "Confirms the assistance to a party of one or more participants by creating a confirmation object.",
        "parameters": [],
        "tags": [
          "party"
        ],
        "security": [
          {
            "personalKey": []
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/idPartyParameter"
        }
      ],
      "get": {
        "summary": "List confirmations for a party",
        "operationId": "listPartyConfirmation",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmationCollectionResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "List all attendance confirmations submitted for a certain party.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "tags": [
          "confirmation"
        ]
      }
    },
    "/party/{party}/confirmation/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idPartyParameter"
        },
        {
          "$ref": "#/components/parameters/idParameter"
        }
      ],
      "get": {
        "summary": "Get details about a confirmation",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Confirmation"
                }
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "getConfirmationId",
        "description": "Gets a confirmation given its ID.",
        "tags": [
          "confirmation"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          }
        ]
      },
      "delete": {
        "summary": "Remove a confirmation",
        "operationId": "deleteConfirmationId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/ifMatchHeader"
          }
        ],
        "description": "Removes a confirmation.",
        "tags": [
          "party"
        ],
        "security": [
          {
            "personalKey": []
          }
        ]
      }
    },
    "/party/{party}/confirmation/{confirmation}/user": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idPartyParameter"
        },
        {
          "$ref": "#/components/parameters/idConfirmationParameter"
        }
      ],
      "post": {
        "summary": "Add user to an attendance confirmation photo",
        "operationId": "postUserConfirmation",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Confirmation"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Allows to add an user to a confirmation photo. Upon addition, the confirmation object is returned.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifMatchHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttendanceCreation"
              }
            }
          }
        },
        "tags": [
          "confirmation"
        ],
        "security": [
          {
            "personalKey": []
          }
        ]
      }
    },
    "/party/{party}/confirmation/{confirmation}/user/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idPartyParameter"
        },
        {
          "$ref": "#/components/parameters/idConfirmationParameter"
        },
        {
          "$ref": "#/components/parameters/idParameter"
        }
      ],
      "delete": {
        "summary": "Delete user from attendance confirmation",
        "operationId": "deleteUserConfirmationId",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Confirmation"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/ifMatchHeader"
          }
        ],
        "description": "Removes an user from an attendance confirmation photo. Upon removal, the confirmation object is returned.",
        "tags": [
          "confirmation"
        ],
        "security": [
          {
            "personalKey": []
          }
        ]
      }
    },
    "/partyType": {
      "get": {
        "summary": "List party types",
        "tags": [
          "partyType"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartyTypeCollectionResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "listPartyTypes",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "description": "List existing party types."
      },
      "post": {
        "summary": "Create party type",
        "operationId": "postPartyType",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartyType"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartyType"
              }
            }
          }
        },
        "parameters": [],
        "description": "Allows addition of new party types.",
        "tags": [
          "partyType"
        ],
        "security": [
          {
            "personalKey": []
          }
        ]
      }
    },
    "/partyType/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idParameter"
        }
      ],
      "get": {
        "summary": "Get party type by ID",
        "tags": [
          "partyType"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartyType"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "getPartyTypeId",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          }
        ],
        "description": "Gets an party type given its ID."
      },
      "delete": {
        "summary": "Delete party type",
        "operationId": "deletePartyId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Removes a party type given its ID.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifMatchHeader"
          }
        ],
        "tags": [
          "partyType"
        ],
        "security": [
          {
            "personalKey": []
          }
        ]
      }
    },
    "/extra": {
      "get": {
        "summary": "List extra bonus types",
        "tags": [
          "extra"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtraCollectionResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "listExtras",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "description": "List existing extra points."
      },
      "post": {
        "summary": "Create extra bonus type",
        "operationId": "postExtra",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Extra"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Allows addition of new bonus types.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Extra"
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "extra"
        ],
        "security": [
          {
            "personalKey": []
          }
        ]
      }
    },
    "/extra/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get extra bonus type by ID",
        "tags": [
          "extra"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Extra"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "getExtraId",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          }
        ],
        "description": "Gets an extra bonus type given its ID."
      },
      "delete": {
        "summary": "Delete extra bonus type by ID",
        "operationId": "deleteExtraId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Removes an extra bonus type given its ID.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifMatchHeader"
          }
        ],
        "tags": [
          "extra"
        ],
        "security": [
          {
            "personalKey": []
          }
        ]
      }
    },
    "/officialParty": {
      "get": {
        "summary": "List official parties",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfficialPartyCollectionReponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "listOfficialParties",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "description": "List all known official parties.",
        "tags": [
          "officialParty"
        ]
      },
      "post": {
        "summary": "Create extra bonus type",
        "operationId": "postOfficialParty",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfficialParty"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Allows addition of new bonus types.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfficialParty"
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "officialParty"
        ],
        "security": [
          {
            "personalKey": []
          }
        ]
      }
    },
    "/officialParty/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get extra bonus type by ID",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfficialParty"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "getOfficialPartyId",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          }
        ],
        "description": "Gets an extra bonus type given its ID.",
        "tags": [
          "officialParty"
        ]
      },
      "delete": {
        "summary": "Delete extra bonus type by ID",
        "operationId": "deleteOfficialPartyId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Removes an extra bonus type given its ID.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifMatchHeader"
          }
        ],
        "tags": [
          "officialParty"
        ],
        "security": [
          {
            "personalKey": []
          }
        ]
      }
    },
    "/confirmation": {
      "get": {
        "summary": "List confirmations",
        "tags": [
          "confirmation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmationCollectionResponse"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "data": [
                        {
                          "id": 0,
                          "party": {
                            "id": 0,
                            "type": {
                              "name": "string",
                              "points": 0
                            },
                            "announcement": {
                              "id": 0,
                              "date": "2019-08-24",
                              "location": {
                                "name": "string",
                                "id": "string"
                              },
                              "announcer": {
                                "id": 0,
                                "name": "string",
                                "avatar": "http://example.com",
                                "score": 0,
                                "victories": 0,
                                "location": {
                                  "name": "string",
                                  "id": "string"
                                }
                              }
                            }
                          },
                          "photo": "http://example.com",
                          "attenders": [
                            {
                              "user": {
                                "id": 0,
                                "name": "string",
                                "avatar": "http://example.com",
                                "score": 0,
                                "victories": 0,
                                "location": {
                                  "name": "string",
                                  "id": "string"
                                }
                              },
                              "extras": [
                                {
                                  "id": 0,
                                  "name": "string",
                                  "points": 0
                                }
                              ],
                              "points": 0
                            }
                          ]
                        }
                      ],
                      "metadata": {
                        "count": 0,
                        "total": 0,
                        "first": "http://example.com",
                        "previous": "http://example.com",
                        "next": "http://example.com",
                        "last": "http://example.com"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "listConfirmation",
        "description": "List all attendance confirmations for all users in descending chronological order. This allows to obtain a general history of scoring.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "EntityId": {
        "type": "integer",
        "title": "EntityId",
        "format": "int64",
        "description": "Unique identifier of an entity.",
        "minimum": 0
      },
      "PageMetadata": {
        "title": "PageMetadata",
        "type": "object",
        "description": "Necessary information for paged collections.",
        "x-examples": {
          "Example page metadata": {
            "value": {
              "count": 10,
              "total": 50,
              "first": "http://example.com",
              "previous": "http://example.com",
              "next": "http://example.com",
              "last": "http://example.com",
              "start": 1,
              "finish": 10
            }
          }
        },
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of elements in this page.",
            "format": "int64"
          },
          "total": {
            "type": "integer",
            "description": "Total number of elements in the collection.",
            "format": "int64"
          },
          "first": {
            "type": "string",
            "format": "uri",
            "description": "Link to the first page of this collection."
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "description": "Link to the previous page of this collection. Only present if there is a previous page."
          },
          "next": {
            "type": "string",
            "format": "uri",
            "description": "Link to the next page of this collection. Only present if there is a next page."
          },
          "last": {
            "type": "string",
            "format": "uri",
            "description": "Link to the last page of this collection."
          }
        },
        "required": [
          "count",
          "total",
          "first",
          "last"
        ]
      },
      "RankingCollectionResponse": {
        "title": "RankingCollectionResponse",
        "type": "object",
        "description": "Paged collection response for raking requests. Includes ranking data and paging metadata.",
        "properties": {
          "data": {
            "type": "array",
            "description": "The ranking information sorted by rank.",
            "items": {
              "$ref": "#/components/schemas/Ranking"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ],
        "x-examples": {
          "Example response": {
            "value": {
              "data": [
                {
                  "position": 0,
                  "variation": "RISES",
                  "holder": {
                    "id": 0,
                    "name": "string",
                    "avatar": "http://example.com",
                    "score": 0,
                    "victories": 0
                  }
                }
              ],
              "metadata": {
                "count": 0,
                "total": 0,
                "first": "http://example.com",
                "previous": "http://example.com",
                "next": "http://example.com",
                "last": "http://example.com",
                "start": 0,
                "finish": 0
              }
            }
          }
        }
      },
      "Ranking": {
        "title": "Ranking",
        "type": "object",
        "description": "Represents a position on the contest's ranking, always held by an user.",
        "properties": {
          "position": {
            "type": "integer",
            "description": "Number of the position in the ranking.",
            "format": "int64"
          },
          "variation": {
            "type": "string",
            "description": "Represents the user's variation in rank after the last update. Possible values are RISES, STAYS and FALLS.",
            "enum": [
              "RISES",
              "STAYS",
              "FALLS"
            ]
          },
          "holder": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "position",
          "variation",
          "holder"
        ],
        "x-examples": {
          "Example ranking": {
            "value": {
              "position": -9223372036854776000,
              "variation": "RISES",
              "holder": {
                "id": 0,
                "name": "string",
                "avatar": "http://example.com",
                "score": 0,
                "victories": 0
              }
            }
          }
        }
      },
      "UserCollectionResponse": {
        "title": "UserCollectionResponse",
        "type": "object",
        "description": "Paged collection response for user list requests. Includes user profile data and paging metadata.",
        "properties": {
          "data": {
            "type": "array",
            "description": "The list of users.",
            "items": {
              "$ref": "#/components/schemas/UserPrivate"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "User": {
        "title": "User",
        "type": "object",
        "description": "Represents publicly available information about an user.",
        "x-examples": {
          "Example": {
            "value": {
              "id": 0,
              "name": "string",
              "avatar": "http://example.com",
              "score": -9223372036854776000,
              "victories": 0
            }
          }
        },
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Display name of the user."
          },
          "avatar": {
            "type": "string",
            "format": "uri",
            "description": "URL to the user's avatar.\n"
          },
          "score": {
            "type": "integer",
            "format": "int64",
            "description": "User's current score."
          },
          "victories": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "description": "Number of times this participant has won the contest."
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        },
        "required": [
          "id",
          "name",
          "avatar",
          "score",
          "victories",
          "location"
        ]
      },
      "UserPrivate": {
        "title": "UserPrivate",
        "type": "object",
        "description": "This model represents an user for administrative purposes. It contains all information about an user, both public and private.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Display name of the user."
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 1,
            "description": "New user's email."
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "avatar": {
            "type": "string",
            "format": "uri",
            "description": "URL to the user's avatar.\n"
          },
          "score": {
            "type": "integer",
            "format": "int64",
            "description": "User's current score."
          },
          "victories": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "description": "Number of times this participant has won the contest."
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "location",
          "avatar",
          "score",
          "victories"
        ]
      },
      "UserCreation": {
        "title": "UserCreation",
        "type": "object",
        "description": "Represents information about an user. This model is used for creating a new user in the system.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Display name of the user."
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 1,
            "description": "New user's email."
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "description": "New user's password."
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "password",
          "location"
        ]
      },
      "UserSelfUpdate": {
        "title": "UpdateSelfUpdate",
        "type": "object",
        "description": "Model used to update an user's public profile. This allows for partial updates as fields can be individually sent to only update their individual values. The value of any field not sent will be preserved as it appears on the resources previous version.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Display name of the user."
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 1,
            "description": "New user's email."
          }
        }
      },
      "UserAdminUpdate": {
        "title": "UserAdminUpdate",
        "type": "object",
        "description": "Model used to update another user's profile from an administrator account. This allows for partial updates as fields can be individually sent to only update their individual values. The value of any field not sent will be preserved as it appears on the resources previous version.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Display name of the user."
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 1,
            "description": "New user's email."
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "victories": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "description": "Number of times this participant has won the contest."
          }
        }
      },
      "AnnouncementCollectionResponse": {
        "title": "AnnouncementCollectionResponse",
        "type": "object",
        "description": "Paged collection response for announcement list requests. Includes announcement data and paging metadata.",
        "properties": {
          "data": {
            "type": "array",
            "description": "The list of announcements.",
            "items": {
              "$ref": "#/components/schemas/Announcement"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "Announcement": {
        "title": "Announcement",
        "type": "object",
        "description": "An announcement is a party proposal that a user can create.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date (to day precission only) of this announcement."
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "announcer": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "date",
          "location",
          "announcer"
        ]
      },
      "AnnouncementCreation": {
        "title": "AnnouncementCreation",
        "type": "object",
        "description": "An announcement is a party proposal that a user can create. This is the model for announcement creation. It's different for the complete announcement data in that it doesn't need to include the user, which will be obtained from the session information.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date (to day precission only) of this announcement."
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "partyTypeId": {
            "$ref": "#/components/schemas/EntityId"
          }
        },
        "required": [
          "id",
          "date",
          "location",
          "partyTypeId"
        ]
      },
      "PartyCollectionResponse": {
        "title": "PartyCollectionResponse",
        "type": "object",
        "description": "Paged collection response for party list requests. Includes party data and paging metadata.",
        "properties": {
          "data": {
            "type": "array",
            "description": "The list of parties.",
            "items": {
              "$ref": "#/components/schemas/Party"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "Party": {
        "title": "Party",
        "type": "object",
        "description": "Represents a party. Includes information of announcement and confirmations.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "type": {
            "$ref": "#/components/schemas/PartyType"
          },
          "announcement": {
            "$ref": "#/components/schemas/Announcement"
          }
        },
        "required": [
          "id",
          "type",
          "announcement"
        ]
      },
      "PartyCreation": {
        "title": "PartyCreation",
        "type": "object",
        "description": "Model used to create a party object from an announcement. It only includes necessary data.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "type": {
            "$ref": "#/components/schemas/PartyType"
          },
          "announcement": {
            "$ref": "#/components/schemas/EntityId"
          }
        },
        "required": [
          "id",
          "type",
          "announcement"
        ]
      },
      "PartyTypeCollectionResponse": {
        "title": "PartyTypeCollectionResponse",
        "type": "object",
        "description": "Paged collection response for party type list requests. Includes party type data and paging metadata.",
        "properties": {
          "data": {
            "type": "array",
            "description": "List of existing party types.",
            "items": {
              "$ref": "#/components/schemas/PartyType"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "PartyType": {
        "type": "object",
        "title": "PartyType",
        "description": "Describes the possible types of parties.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Short name of this party type",
            "minLength": 1
          },
          "points": {
            "type": "integer",
            "format": "int64",
            "description": "Base points granted by this party type"
          }
        },
        "required": [
          "name",
          "points"
        ]
      },
      "ConfirmationCollectionResponse": {
        "title": "ConfirmationCollectionResponse",
        "type": "object",
        "description": "Paged collection response for attendance confirmation list requests. Includes confirmation data and paging metadata.",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Confirmation"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "Confirmation": {
        "title": "Confirmation",
        "type": "object",
        "description": "Confirm the attendance of a certain amount of users to a party.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "party": {
            "$ref": "#/components/schemas/Party"
          },
          "photo": {
            "type": "string",
            "format": "uri",
            "description": "Pictorial evidence of the assistance of a group of people to a convened party."
          },
          "attenders": {
            "type": "array",
            "description": "List of user IDs of those present in the picture.",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/Attendance"
            }
          }
        },
        "required": [
          "id",
          "party",
          "photo",
          "attenders"
        ]
      },
      "ConfirmationCreation": {
        "title": "ConfirmationCreation",
        "type": "object",
        "description": "Confirm the attendance of a certain amount of users to a party. This is the model for the creation of a confirmation resource.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "photo": {
            "type": "string",
            "format": "binary",
            "description": "The attendance confirmation photo."
          }
        },
        "required": [
          "id",
          "photo"
        ]
      },
      "Attendance": {
        "title": "Attendance",
        "type": "object",
        "description": "Represents the joining of a user and the extras gained by them by attending a certain party.",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "extras": {
            "type": "array",
            "description": "List of extras included with this attendance.",
            "items": {
              "$ref": "#/components/schemas/Extra"
            }
          },
          "points": {
            "type": "integer",
            "description": "Points earned by the user by this attendance.",
            "format": "int64"
          }
        },
        "required": [
          "user",
          "extras",
          "points"
        ]
      },
      "AttendanceCreation": {
        "title": "AttendanceCreation",
        "type": "object",
        "description": "Represents the joining of a user and the extras gained by them by attending a certain party. Model used for creating attendance entries in a confirmation object, using only IDs of referenced data.",
        "properties": {
          "userId": {
            "$ref": "#/components/schemas/EntityId"
          },
          "extraIds": {
            "type": "array",
            "description": "List of extras included with this attendance.",
            "items": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        },
        "required": [
          "userId",
          "extraIds"
        ]
      },
      "ExtraCollectionResponse": {
        "title": "ExtraCollectionResponse",
        "type": "object",
        "description": "Paged collection response for extra scoring list requests. Includes extra scoring data and paging metadata.",
        "properties": {
          "data": {
            "type": "array",
            "description": "List of existing extras.",
            "items": {
              "$ref": "#/components/schemas/Extra"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "Extra": {
        "title": "Extra",
        "type": "object",
        "description": "Represents a scoring bonus given to a user for attendance to a certain party.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "name": {
            "type": "string",
            "description": "Name of the bonus."
          },
          "points": {
            "type": "integer",
            "description": "Point value of the bonus."
          }
        },
        "required": [
          "id",
          "name",
          "points"
        ]
      },
      "OfficialPartyCollectionReponse": {
        "title": "OfficialPartyCollectionResponse",
        "type": "object",
        "description": "Paged collection response for official party list requests. Includes official party data and paging metadata.",
        "properties": {
          "data": {
            "type": "array",
            "description": "List of known official parties.",
            "items": {
              "$ref": "#/components/schemas/OfficialParty"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "OfficialParty": {
        "title": "OfficialParty",
        "type": "object",
        "description": "Model for an official party, having special scoring scheme for its duration.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "name": {
            "type": "string",
            "description": "Name of this official party.",
            "minLength": 1
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "Starting date of this official party."
          },
          "duration": {
            "type": "integer",
            "format": "duration",
            "description": "Number of days this official party takes place."
          }
        },
        "required": [
          "id",
          "name",
          "location",
          "startDate",
          "duration"
        ]
      },
      "PasswordChange": {
        "title": "PasswordChange",
        "type": "object",
        "description": "Model to allow the user to change the password of their account.",
        "properties": {
          "old": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "description": "Previously used password."
          },
          "new": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "description": "Desired new password."
          }
        },
        "required": [
          "old",
          "new"
        ]
      },
      "PasswordResetRequest": {
        "title": "PasswordResetRequest",
        "type": "object",
        "description": "Allows someone to request a password reset for an account.",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The account's email."
          }
        },
        "required": [
          "email"
        ]
      },
      "PasswordReset": {
        "title": "PasswordReset",
        "type": "object",
        "description": "Send in a new password for the user.",
        "properties": {
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "description": "Password for the user."
          }
        },
        "required": [
          "password"
        ]
      },
      "Location": {
        "title": "Location",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Google Places API location identifier"
          },
          "id": {
            "type": "string",
            "maxLength": 255,
            "description": "Location's name"
          }
        },
        "required": [
          "name",
          "id"
        ],
        "description": "Represents a geographical location"
      }
    },
    "parameters": {
      "limit": {
        "name": "limit",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 100,
          "format": "int64"
        },
        "description": "Number of elements to return in a collection request."
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int64",
          "default": 0,
          "minimum": 0
        },
        "description": "Number of elements to skip in a collection request."
      },
      "idParameter": {
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer",
          "minLength": 1,
          "format": "int64",
          "minimum": 0,
          "example": 1752567
        },
        "description": "Identifier for an entity in the system, passed as a path parameter."
      },
      "idPartyParameter": {
        "name": "party",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer",
          "minLength": 1,
          "format": "int64",
          "minimum": 0,
          "example": 3456092
        },
        "description": "Identifier for a party, passed as a path parameter."
      },
      "idConfirmationParameter": {
        "name": "confirmation",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer",
          "minLength": 1,
          "format": "int64",
          "minimum": 0,
          "example": 1200107
        },
        "description": "Identifier for an attendance confirmation, passed as a path parameter."
      },
      "ifNoneMatchHeader": {
        "name": "If-None-Match",
        "in": "header",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": "The If-None-Match HTTP request header makes the request conditional. For GET and HEAD methods, the server will send back the requested resource, with a 200 status, only if it doesn't have an ETag matching the given ones. For other methods, the request will be processed only if the eventually existing resource's ETag doesn't match any of the values listed."
      },
      "ifMatchHeader": {
        "name": "If-Match",
        "in": "header",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": "The If-Match HTTP request header makes the request conditional. For GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. For PUT and other non-safe methods, it will only upload the resource in this case."
      }
    },
    "headers": {
      "eTagHeader": {
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": "The ETag HTTP response header is an identifier for a specific version of a resource. It lets caches be more efficient and save bandwidth, as a web server does not need to resend a full response if the content has not changed. Additionally, etags help prevent simultaneous updates of a resource from overwriting each other mid-air collisions)."
      }
    },
    "securitySchemes": {
      "personalKey": {
        "type": "http",
        "scheme": "basic"
      }
    }
  },
  "tags": [
    {
      "name": "account"
    },
    {
      "name": "announcement"
    },
    {
      "name": "confirmation"
    },
    {
      "name": "extra"
    },
    {
      "name": "officialParty"
    },
    {
      "name": "party"
    },
    {
      "name": "partyType"
    },
    {
      "name": "ranking"
    },
    {
      "name": "user"
    }
  ]
}