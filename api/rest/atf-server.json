{
  "openapi": "3.1.0",
  "info": {
    "title": "atf-server",
    "version": "0.1",
    "summary": "Server API for ATF-like contests, managing points, users and parties.",
    "license": {
      "name": "AGPLv3",
      "url": "https://www.gnu.org/licenses/gpl-3.0.html"
    },
    "contact": {
      "name": "Gonzalo J. Carracedo",
      "url": "https://actinid.org/"
    },
    "description": "This API describes the communication protocol between client and server for a party contest."
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/ranking": {
      "get": {
        "summary": "Query ranking",
        "tags": [
          "ranking"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RankingCollectionResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "list-ranking",
        "description": "Gives access to the current contest ranking.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          }
        ]
      }
    },
    "/user": {
      "get": {
        "summary": "Query user list",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCollectionResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          }
        },
        "operationId": "list-users",
        "description": "List existing users.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          }
        ]
      },
      "post": {
        "summary": "Create user",
        "operationId": "post-user",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Create a new user in the system.",
        "tags": [
          "user"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreation"
              }
            }
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "summary": "Fetch user data",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          }
        },
        "operationId": "get-user-id",
        "description": "Get an user.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/idParameter"
        }
      ]
    },
    "/announcement": {
      "get": {
        "summary": "Query announcement list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnouncementCollectionResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "list-announcement",
        "description": "Lists all announcements currently visible. That is, announcements active at the present time for anonymous and normal users and all existing announcements for admin users.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          }
        ],
        "tags": [
          "announcement"
        ]
      },
      "post": {
        "summary": "Create announcement",
        "operationId": "post-announcement",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Announcement"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Creates a new announcement. This endpoint is only available to authenticated users.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnouncementCreation"
              }
            }
          }
        },
        "tags": [
          "announcement"
        ]
      }
    },
    "/announcement/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get announcement details",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Announcement"
                }
              }
            }
          }
        },
        "operationId": "get-announcement-id",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          }
        ],
        "tags": [
          "announcement"
        ],
        "description": "Gets data about an announcement given its ID."
      },
      "delete": {
        "summary": "",
        "operationId": "delete-announcement-id",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/ifMatchHeader"
          }
        ],
        "tags": [
          "announcement"
        ],
        "description": "Removes an announcement."
      }
    },
    "/party": {
      "get": {
        "summary": "List parties",
        "tags": [
          "party"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartyCollectionResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          }
        },
        "operationId": "list-party",
        "description": "Lists existing parties.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifNoneMatchHeader"
          }
        ]
      },
      "post": {
        "summary": "",
        "operationId": "post-party",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Party"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartyCreation"
              }
            }
          }
        },
        "description": "This endpoint is used to create a party resource. Note it is assymetrical, since parties, once created, include much denormalized information, useful on presenting them on screen.\n\nThis endpoint will receive a PartyCreation object and return a full Party object.",
        "tags": [
          "party"
        ]
      }
    },
    "/party/{party}/confirmation": {
      "post": {
        "summary": "Confirm assistance",
        "operationId": "post-confirmation",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Confirmation"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/eTagHeader"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmationCreation"
              },
              "examples": {}
            }
          },
          "description": "The confirmation creation, including an ID and the confirmation image as payload in multipart/form-data."
        },
        "description": "Confirms the assistance to a party of one or more participants by creating a confirmation object.",
        "parameters": [],
        "tags": [
          "party"
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "name": "party",
          "in": "path",
          "required": true,
          "description": "ID of a party."
        }
      ]
    },
    "/party/{party}/confirmation/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "name": "party",
          "in": "path",
          "required": true,
          "description": "ID of a party."
        },
        {
          "$ref": "#/components/parameters/idParameter"
        }
      ],
      "get": {
        "summary": "Get details about a confirmation",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Confirmation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-confirmation-id",
        "description": "Gets a confirmation given its ID.",
        "tags": [
          "party"
        ]
      },
      "delete": {
        "summary": "Remove a confirmation",
        "operationId": "delete-confirmation-id",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/ifMatchHeader"
          }
        ],
        "description": "Removes a confirmation.",
        "tags": [
          "party"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "EntityId": {
        "type": "integer",
        "title": "EntityId",
        "format": "int64",
        "description": "Entity identifier.",
        "minimum": 0
      },
      "PageMetadata": {
        "title": "PageMetadata",
        "type": "object",
        "description": "Necessary information for paged collections.",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of elements in this page.",
            "format": "int64"
          },
          "total": {
            "type": "integer",
            "description": "Total number of elements in the collection.",
            "format": "int64"
          },
          "first": {
            "type": "string",
            "format": "uri",
            "description": "Link to the first page of this collection."
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "description": "Link to the previous page of this collection. Only present if there is a previous page."
          },
          "next": {
            "type": "string",
            "format": "uri",
            "description": "Link to the next page of this collection. Only present if there is a next page."
          },
          "last": {
            "type": "string",
            "format": "uri",
            "description": "Link to the last page of this collection."
          },
          "start": {
            "type": "integer",
            "description": "Number of the item at the start of this page. Only present if the page is not empty.",
            "format": "int64"
          },
          "finish": {
            "type": "integer",
            "description": "Number of the item at the end of this page. Only present if the page is not empty.",
            "format": "int64"
          }
        },
        "required": [
          "count",
          "total",
          "first",
          "last"
        ]
      },
      "RankingCollectionResponse": {
        "title": "RankingCollectionResponse",
        "type": "object",
        "description": "Paged collection response for raking requests. Includes ranking data and paging metadata.",
        "properties": {
          "data": {
            "type": "array",
            "description": "The ranking information sorted by rank.",
            "items": {
              "$ref": "#/components/schemas/Ranking"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "Ranking": {
        "title": "Ranking",
        "type": "object",
        "description": "Represents a position on the contest's ranking, always held by an user.",
        "properties": {
          "position": {
            "type": "integer",
            "description": "Number of the position in the ranking.",
            "format": "int64"
          },
          "variation": {
            "type": "string",
            "description": "Represents the user's variation in rank after the last update. Possible values are RISES, STAYS and FALLS.",
            "enum": [
              "RISES",
              "STAYS",
              "FALLS"
            ]
          },
          "holder": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "position",
          "variation",
          "holder"
        ]
      },
      "UserCollectionResponse": {
        "title": "UserCollectionResponse",
        "type": "object",
        "description": "Paged collection response for user list requests. Includes user profile data and paging metadata.",
        "properties": {
          "data": {
            "type": "array",
            "description": "The list of users.",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        }
      },
      "User": {
        "title": "User",
        "type": "object",
        "description": "Represents publicly available information about an user.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Display name of the user."
          },
          "avatar": {
            "type": "string",
            "format": "uri",
            "description": "URL to the user's avatar.\n"
          },
          "score": {
            "type": "integer",
            "format": "int64",
            "description": "User's current score."
          },
          "victories": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "description": "Number of times this participant has won the contest."
          }
        },
        "required": [
          "id",
          "name",
          "avatar",
          "score",
          "victories"
        ]
      },
      "UserCreation": {
        "title": "UserCreation",
        "type": "object",
        "description": "Represents information about an user. This model is used for creating a new user in the system.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Display name of the user."
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 1,
            "description": "New user's email."
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "description": "New user's password."
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "password"
        ]
      },
      "AnnouncementCollectionResponse": {
        "title": "AnnouncementCollectionResponse",
        "type": "object",
        "description": "Paged collection response for announcement list requests. Includes announcement data and paging metadata.",
        "properties": {
          "data": {
            "type": "array",
            "description": "The list of announcements.",
            "items": {
              "$ref": "#/components/schemas/Announcement"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        }
      },
      "Announcement": {
        "title": "Announcement",
        "type": "object",
        "description": "An announcement is a party proposal that a user can create.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date (to day precission only) of this announcement."
          },
          "location": {
            "type": "string",
            "minLength": 1,
            "description": "Geographical location of this announcement."
          },
          "announcer": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "date",
          "location",
          "announcer"
        ]
      },
      "AnnouncementCreation": {
        "title": "AnnouncementCreation",
        "type": "object",
        "description": "An announcement is a party proposal that a user can create. This is the model for announcement creation. It's different for the complete announcement data in that it doesn't need to include the user, which will be obtained from the session information.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date (to day precission only) of this announcement."
          },
          "location": {
            "type": "string",
            "minLength": 1,
            "description": "Geographical location of this announcement."
          }
        },
        "required": [
          "id",
          "date",
          "location"
        ]
      },
      "PartyCollectionResponse": {
        "title": "PartyCollectionResponse",
        "type": "object",
        "description": "Paged collection response for party list requests. Includes party data and paging metadata.",
        "properties": {
          "data": {
            "type": "array",
            "description": "The list of parties.",
            "items": {
              "$ref": "#/components/schemas/Party"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "Party": {
        "title": "Party",
        "type": "object",
        "description": "Represents a party. Includes information of announcement and confirmations.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "type": {
            "$ref": "#/components/schemas/PartyType"
          },
          "announcement": {
            "$ref": "#/components/schemas/Announcement"
          },
          "confirmations": {
            "type": "array",
            "description": "List of confirmations for this party.",
            "items": {
              "$ref": "#/components/schemas/Confirmation"
            }
          }
        },
        "required": [
          "id",
          "type",
          "announcement",
          "confirmations"
        ]
      },
      "PartyCreation": {
        "title": "PartyCreation",
        "type": "object",
        "description": "Model used to create a party object from an announcement. It only includes necessary data.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "announcement": {
            "$ref": "#/components/schemas/EntityId"
          },
          "type": {
            "$ref": "#/components/schemas/PartyType"
          }
        },
        "required": [
          "id",
          "announcement",
          "type"
        ]
      },
      "PartyType": {
        "type": "string",
        "title": "PartyType",
        "enum": [
          "STANDARD",
          "OFFICIAL",
          "INTERNATIONAL"
        ],
        "description": "Describes the possible types of parties."
      },
      "Confirmation": {
        "title": "Confirmation",
        "type": "object",
        "description": "Confirm the attendance of a certain amount of users to a party.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "photo": {
            "type": "string",
            "format": "uri",
            "description": "Pictorial evidence of the assistance of a group of people to a convened party."
          },
          "attenders": {
            "type": "array",
            "description": "List of user IDs of those present in the picture.",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        },
        "required": [
          "id",
          "photo",
          "attenders"
        ]
      },
      "ConfirmationCreation": {
        "title": "ConfirmationCreation",
        "type": "object",
        "description": "Confirm the attendance of a certain amount of users to a party. This is the model for the creation of a confirmation resource.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "photo": {
            "type": "string",
            "format": "binary",
            "description": "The attendance confirmation photo."
          }
        },
        "required": [
          "id",
          "photo"
        ]
      }
    },
    "parameters": {
      "limit": {
        "name": "limit",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 100,
          "format": "int64"
        },
        "description": "Number of elements to return in a collection request."
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int64",
          "default": 0,
          "minimum": 0
        },
        "description": "Number of elements to skip in a collection request."
      },
      "idParameter": {
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer",
          "minLength": 1,
          "format": "int64",
          "minimum": 0,
          "example": 1752567
        },
        "description": "Identifier for an entity in the system, passed as a path parameter."
      },
      "ifNoneMatchHeader": {
        "name": "If-None-Match",
        "in": "header",
        "required": false,
        "schema": {
          "type": "array"
        },
        "description": "The If-None-Match HTTP request header makes the request conditional. For GET and HEAD methods, the server will send back the requested resource, with a 200 status, only if it doesn't have an ETag matching the given ones. For other methods, the request will be processed only if the eventually existing resource's ETag doesn't match any of the values listed."
      },
      "ifMatchHeader": {
        "name": "If-Match",
        "in": "header",
        "required": false,
        "schema": {
          "type": "array"
        },
        "description": "The If-Match HTTP request header makes the request conditional. For GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. For PUT and other non-safe methods, it will only upload the resource in this case."
      }
    },
    "headers": {
      "eTagHeader": {
        "schema": {
          "type": "array"
        },
        "description": "The ETag HTTP response header is an identifier for a specific version of a resource. It lets caches be more efficient and save bandwidth, as a web server does not need to resend a full response if the content has not changed. Additionally, etags help prevent simultaneous updates of a resource from overwriting each other mid-air collisions)."
      }
    },
    "securitySchemes": {
      "personalKey": {
        "type": "http",
        "scheme": "basic"
      }
    }
  },
  "tags": [
    {
      "name": "announcement"
    },
    {
      "name": "party"
    },
    {
      "name": "ranking"
    },
    {
      "name": "user"
    }
  ]
}