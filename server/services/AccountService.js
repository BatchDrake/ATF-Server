/* eslint-disable no-unused-vars */
const Service = require('./Service');

/**
* Allows changing the password of the current logged in user.
*
* passwordChange PasswordChange  (optional)
* no response value expected for this operation
* */
const accountChangePassword = ({ passwordChange }) => new Promise(
  async (resolve, reject) => {
    try {
      resolve(Service.successResponse({
        passwordChange,
      }));
    } catch (e) {
      reject(Service.rejectResponse(
        e.message || 'Invalid input',
        e.status || 405,
      ));
    }
  },
);
/**
* Ends the current user session.
*
* no response value expected for this operation
* */
const accountLogout = () => new Promise(
  async (resolve, reject) => {
    try {
      resolve(Service.successResponse({
      }));
    } catch (e) {
      reject(Service.rejectResponse(
        e.message || 'Invalid input',
        e.status || 405,
      ));
    }
  },
);
/**
* This endpoint allows finishing the password reset process. The token received by email is sent on the path. A new password for the user is passed in the body of the request.  A 200 OK status code will indicate the lifetime of the used token is expired and the password has been set to the new value.  A 400 Bad Request will be produced if the body is invalid, be it that the password is not accepted as valid or that the body doesn't conform to the specification.  A 404 Not Found response will indicate that the introduced token is not a valid token generated by the system.
*
* token String Password reset token received by the user via email.
* passwordReset PasswordReset  (optional)
* no response value expected for this operation
* */
const accountReset = ({ token, passwordReset }) => new Promise(
  async (resolve, reject) => {
    try {
      resolve(Service.successResponse({
        token,
        passwordReset,
      }));
    } catch (e) {
      reject(Service.rejectResponse(
        e.message || 'Invalid input',
        e.status || 405,
      ));
    }
  },
);
/**
* This endpoint allows requesting the resetting of an account's password given the user has access to the email account used to register this account.  The process involves sending an email address to this endpoint, which, if existing, will trigger the system sending an email with a one time token to reset the account to that address.  For security reasons this endpoint will answer 202 Accepted in any case, whether the email is in the system or not, to prevent enumeration attacks. If the object receive does not contain a valid email address or does not contain one at all, the answer will be 400 Bad Request.
*
* passwordResetRequest PasswordResetRequest  (optional)
* no response value expected for this operation
* */
const requestAccountReset = ({ passwordResetRequest }) => new Promise(
  async (resolve, reject) => {
    try {
      resolve(Service.successResponse({
        passwordResetRequest,
      }));
    } catch (e) {
      reject(Service.rejectResponse(
        e.message || 'Invalid input',
        e.status || 405,
      ));
    }
  },
);

module.exports = {
  accountChangePassword,
  accountLogout,
  accountReset,
  requestAccountReset,
};
